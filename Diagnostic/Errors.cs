using System.Collections.Generic;

namespace VistaDB.Diagnostic
{
  public class Errors : Dictionary<int, string>
  {
    private string assemblyVersion = "4.3.3.34";
    public const int Nonsupported = 10;
    public const int dda_NonSupportedFileExtension = 11;
    public const int lic_Invalid = 25;
    public const int lic_WrongVersion = 26;
    public const int dda_UpdateSpecification = 50;
    public const int dda_InvalidVDBFormat = 51;
    public const int dda_UpdateFTSSpecification = 52;
    public const int dda_InvalidPageSize = 53;
    public const int dda_NewerSpecification = 54;
    public const int dda_CreateStorage = 100;
    public const int dda_OpenStorage = 101;
    public const int dda_CreateHeader = 102;
    public const int dda_ActivateHeader = 103;
    public const int dda_ActivateHeaderStructure = 104;
    public const int dda_ReadHeader = 105;
    public const int dda_WriteHeader = 106;
    public const int dda_AllocateRowStructure = 107;
    public const int dda_RowExceedsPage = 167;
    public const int dda_StorageReadOnlyMode = 108;
    public const int dda_RowsetExlusiveMode = 109;
    public const int dda_ReadStorage = 110;
    public const int dda_WriteStorage = 111;
    public const int dda_DatastorageDeclaration = 112;
    public const int dda_CreateDatabase = 113;
    public const int dda_CreateIsolatedDatabase = 114;
    public const int dda_CreateTemporaryDatabase = 115;
    public const int dda_EncryptionKeyInvalid = 116;
    public const int dda_OpenDatabase = 117;
    public const int dda_OpenIsolatedDatabase = 118;
    public const int dda_CreateTable = 119;
    public const int dda_AlterTable = 120;
    public const int dda_DropTable = 121;
    public const int dda_TableToDropOpened = 122;
    public const int dda_CreateTableHeader = 123;
    public const int dda_EmptyTableSchema = 124;
    public const int dda_OpenTable = 125;
    public const int dda_NonExistedTable = 126;
    public const int dda_NonExistedIndex = 127;
    public const int dda_CloseTable = 128;
    public const int dda_CloseStorage = 129;
    public const int dda_CreateIndex = 130;
    public const int dda_DropIndex = 131;
    public const int dda_CannotDropFKIndex = 132;
    public const int dda_EmptyIndexInformation = 133;
    public const int dda_ActivateIndex = 134;
    public const int dda_ActivateDatabase = 135;
    public const int dda_DeactivateIndex = 136;
    public const int dda_CreateDefaultRow = 137;
    public const int dda_ActivateDefaultRow = 138;
    public const int dda_ActivateNodeAtPosition = 139;
    public const int dda_SchemaChanges = 140;
    public const int dda_CompactFrameworkMode = 141;
    public const int dda_PrimaryKeyContainsNull = 142;
    public const int dda_PrimaryKeySingle = 143;
    public const int dda_PrimaryKeyRefencedInDelete = 144;
    public const int dda_DuplicateTableName = 145;
    public const int dda_DuplicateIndexName = 146;
    public const int dda_DuplicateColumnName = 147;
    public const int dda_IndexKeyColumnCountExceeds = 149;
    public const int dda_IndexKeyColumnInvalid = 150;
    public const int dda_InvalidName = 152;
    public const int dda_ColumnType = 153;
    public const int dda_MaximumColumns = 154;
    public const int dda_FtsActiveIndex = 155;
    public const int dda_FullTextSingle = 156;
    public const int dda_DuplicateTimestamp = 157;
    public const int dda_IsolateStorageAccessMode = 158;
    public const int dda_CannotRenameFKIndex = 159;
    public const int dda_ActivateLockPolicy = 160;
    public const int dda_LockStorage = 161;
    public const int dda_LockStreamPosition = 162;
    public const int dda_LockTimeout = 163;
    public const int dda_LockRow = 164;
    public const int dda_UnlockRow = 165;
    public const int dda_ReleaseLocks = 166;
    public const int dda_Filter = 170;
    public const int dda_DefaultValueFault = 171;
    public const int dda_ConstraintFault = 172;
    public const int dda_ReadonlyFault = 173;
    public const int dda_NullFault = 174;
    public const int dda_NonSupportedDataType = 179;
    public const int dda_TableClosed = 180;
    public const int dda_InvalidColumnByName = 181;
    public const int dda_InvalidColumnByIndex = 182;
    public const int dda_NullValue = 183;
    public const int dda_IdentityExist = 184;
    public const int dda_IdentityNonExist = 185;
    public const int dda_SetIdentity = 186;
    public const int dda_DropIdentity = 187;
    public const int dda_SeedNullValue = 188;
    public const int dda_StepNullValue = 189;
    public const int dda_InvalidIdentityStep = 190;
    public const int dda_NonSupportedIdentity = 191;
    public const int dda_DefaultValueNonExist = 192;
    public const int dda_SetDefaultValue = 193;
    public const int dda_DropDefaultValue = 194;
    public const int dda_ConstraintNotExist = 195;
    public const int dda_SetConstraint = 196;
    public const int dda_DropConstraint = 197;
    public const int dda_NonSupportedDefaultValue = 198;
    public const int dda_PrimaryKeyReferenced = 199;
    public const int dda_CreateForeignKey = 200;
    public const int dda_DropForeignKey = 201;
    public const int dda_PrimaryKeyNotFound = 202;
    public const int dda_PrimaryKeyCannotBeSelfReferenced = 203;
    public const int dda_RelationshipExist = 204;
    public const int dda_RelationshipDoesNotExist = 205;
    public const int dda_PrimaryKeyIdenticalForeignKey = 206;
    public const int dda_AlterSystemColumn = 207;
    public const int dda_ModifySystemTable = 208;
    public const int dda_DropSyncTable = 209;
    public const int dda_ActivateSyncService = 210;
    public const int dda_DeactivateSyncService = 211;
    public const int dda_TombstoneName = 212;
    public const int dda_AnchorTablename = 213;
    public const int dda_CreateRow = 250;
    public const int dda_UpdateRow = 251;
    public const int dda_DeleteRow = 252;
    public const int dda_ActivateLink = 253;
    public const int dda_CreateLink = 254;
    public const int dda_CreateLinks = 255;
    public const int dda_UpdateLink = 256;
    public const int dda_UpdateLinks = 257;
    public const int dda_DeleteLink = 258;
    public const int dda_DeleteLinks = 259;
    public const int dda_InvalidRowInUpdate = 260;
    public const int dda_InvalidRowInDelete = 261;
    public const int dda_RowOutdated = 262;
    public const int dda_CannotFindKey = 270;
    public const int dda_CannotSynchKey = 271;
    public const int dda_InvalidOrderToFindKey = 272;
    public const int dda_IncorrectString = 280;
    public const int dda_CompileExpression = 281;
    public const int dda_CompileKeyExpression = 282;
    public const int dda_InvalidExpression = 285;
    public const int dda_ParenthesisMismatch = 286;
    public const int dda_InvalidDelimiter = 287;
    public const int dda_InvalidParameter = 288;
    public const int dda_VDBType = 289;
    public const int dda_ExpressionTypeCheck = 290;
    public const int dda_InvalidLogicalExpression = 291;
    public const int dda_EvaluateOperator = 292;
    public const int dda_InvalidIfElse = 293;
    public const int dda_UnexpectedThen = 294;
    public const int dda_UnexpectedElse = 295;
    public const int dda_MissingStringDelimiter = 296;
    public const int dda_IncompleteExpression = 297;
    public const int dda_InvalidOperation = 298;
    public const int dda_InvalidFloatFormat = 299;
    public const int dda_DynamicRange = 300;
    public const int dda_StringExceedMaximum = 301;
    public const int dda_DatatypeConversion = 302;
    public const int dda_InvalidCharLength = 303;
    public const int dda_InvalidPageCount = 304;
    public const int dda_InitSpool = 305;
    public const int dda_EvaluateKey = 307;
    public const int dda_EvaluateExpression = 308;
    public const int dda_DuplicateKey = 309;
    public const int dda_CannotAssignEnvironmentVariable = 320;
    public const int dda_CannotAlterRelationship = 321;
    public const int dda_NodeEncryption = 330;
    public const int dda_NodeDecryption = 331;
    public const int dda_DataImport = 332;
    public const int dda_DataExport = 333;
    public const int dda_PackStorage = 334;
    public const int dda_ZapStorage = 335;
    public const int dda_PackDatabase = 336;
    public const int dda_ReadOnlyMode = 337;
    public const int dda_SharedMode = 338;
    public const int dda_CleanStorage = 339;
    public const int dda_BeforeInsertingRow = 340;
    public const int dda_AfterInsertingRow = 341;
    public const int dda_BeforeUpdatingRow = 342;
    public const int dda_AfterUpdatingRow = 343;
    public const int dda_AfterDeletingRow = 345;
    public const int dda_InitRecycling = 346;
    public const int dda_PackViaDDA = 347;
    public const int dda_ExportTable = 360;
    public const int dda_InvalidClrProcedureName = 380;
    public const int dda_DuplicateClrProcedureName = 381;
    public const int dda_ParametersNumberInClrProcedure = 382;
    public const int dda_ClrProcedureNotRegistered = 383;
    public const int dda_ClrProcedureFillRowNotRegistered = 384;
    public const int dda_ClrProcedureReferenced = 385;
    public const int dda_ClrProcedureRegisterFailed = 386;
    public const int dda_ClrProcedureRemoveFailed = 387;
    public const int dda_ClrProcedureInvokeFailed = 388;
    public const int dda_AssemblyNameRegistered = 389;
    public const int dda_AssemblyNotRegistered = 390;
    public const int dda_AssemblyAddFault = 391;
    public const int dda_AssemblyUpdateFault = 392;
    public const int dda_AssemblyDeleteFault = 393;
    public const int dda_DuplicateClrTriggerName = 394;
    public const int dda_ClrTriggerRegisteringFault = 395;
    public const int dda_ClrTriggerUnregisteringFault = 396;
    public const int dda_ClrTriggerNotRegistered = 397;
    public const int dda_ClrTriggerReferenced = 398;
    public const int dda_ClrTriggerInvalidEvent = 399;
    public const int dda_DuplicateSPName = 400;
    public const int dda_SPRegisteringFault = 401;
    public const int dda_SPUnregisteringFault = 402;
    public const int dda_BeginTransaction = 450;
    public const int dda_CommitTransaction = 451;
    public const int dda_RollbackTransaction = 452;
    public const int dda_CreateTransactionLogTable = 453;
    public const int dda_OpenTransactionLogTable = 454;
    public const int dda_TransactionConcurrency = 455;
    public const int dda_IncorrectTpIsolationLevel = 456;
    public const int dda_NestedTransactionsNotSupported = 457;
    public const int dda_RollbackHasNoBegin = 458;
    public const int dda_CommitHasNoBegin = 459;
    public const int dda_TransactionModeOff = 460;
    public const int dda_EncryptionKeyEmpty = 461;
    public const int dda_TransactionModeOnlyOff = 462;
    public const int sql_ExpectedSymbol = 500;
    public const int sql_InvalidParameterCount = 501;
    public const int sql_ExpectedExprButFound = 502;
    public const int sql_UnterminatedString = 503;
    public const int sql_UnterminatedTableName = 504;
    public const int sql_UnterminatedColumnName = 505;
    public const int sql_UnterminatedComment = 506;
    public const int sql_ExpectedExpression = 507;
    public const int sql_UnknownDataType = 508;
    public const int sql_InvalidStatement = 509;
    public const int sql_InvalidParameterDataType = 550;
    public const int sql_NestedAggregateFunction = 551;
    public const int sql_PatternMustBeString = 552;
    public const int sql_InvalidPatternEscapeSymbol = 553;
    public const int sql_UnterminatedPattern = 554;
    public const int sql_InvalidPatternFirstCharacter = 555;
    public const int sql_UnexpectedError = 556;
    public const int sql_InvalidJoinCondition = 557;
    public const int sql_InvalidOperandDataType = 558;
    public const int sql_InvalidLikeMatchExpression = 559;
    public const int sql_InvalidUsingOfIS = 560;
    public const int sql_InvalidExprInResultColumn = 561;
    public const int sql_AggColumnNotInGroupBy = 562;
    public const int sql_TableAliasDuplicated = 563;
    public const int sql_ExpectedBooleanExpression = 564;
    public const int sql_WhereCannotHaveAggregate = 565;
    public const int sql_ColumnDoesNotExist = 567;
    public const int sql_ExprAlreadyPresentInGroup = 568;
    public const int sql_ExprNotPresentInGroup = 569;
    public const int sql_InvalidHavingClauseCondition = 570;
    public const int sql_InvalidHavingExpressions = 571;
    public const int sql_TableNotExist = 572;
    public const int sql_InvalidGroupWithoutAggregate = 573;
    public const int sql_InvalidGroupWithAggregate = 574;
    public const int sql_InvalidHavingWithoutAggregate = 575;
    public const int sql_ExpectedKeyword = 576;
    public const int sql_InvalidUnionColumnCount = 577;
    public const int sql_InvalidUnionColumnTypes = 578;
    public const int sql_SameColumnInSomeTables = 579;
    public const int sql_InvalidGroupStatic = 580;
    public const int sql_CaseMustHaveWhen = 581;
    public const int sql_CaseWhenMustBeBoolean = 582;
    public const int sql_CaseWhenMustBeInputDataType = 583;
    public const int sql_InvalidCaseResultDataType = 584;
    public const int sql_InvalidTableName = 585;
    public const int sql_InvalidColumnName = 586;
    public const int sql_InsertColumnFewerThanValues = 587;
    public const int sql_InsertColumnMoreThanValues = 588;
    public const int sql_InsertColumnFewerThanSelect = 589;
    public const int sql_InsertSelectFewerThanColumn = 590;
    public const int sql_InvalidQueryIndex = 591;
    public const int sql_InvalidToken = 592;
    public const int sql_InvalidCreateDatabaseParams = 593;
    public const int sql_CreateTableColumnsDuplicated = 594;
    public const int sql_CreateTableConstraintDuplicated = 595;
    public const int sql_PrimaryKeyDuplicated = 596;
    public const int sql_TwoClusteredIndexes = 597;
    public const int sql_InvalidForeignKeyCount = 598;
    public const int sql_IdentityAndDefaultValue = 599;
    public const int sql_PrimaryKeyDoesNotExist = 600;
    public const int sql_InvalidPrimaryKeyInReferences = 601;
    public const int sql_InvalidColumnCountInView = 602;
    public const int sql_ViewNameDuplicated = 603;
    public const int sql_SubQueryIsReadOnly = 604;
    public const int sql_ViewIsReadOnly = 605;
    public const int sql_ViewNotExist = 606;
    public const int sql_FunctionNotExist = 607;
    public const int sql_InvalidIdentifier = 608;
    public const int sql_StoredProcIsReadOnly = 609;
    public const int sql_FirstParameterMustBeObject = 610;
    public const int sql_ExpectedOutParameter = 611;
    public const int sql_FillRowDoesNotExist = 612;
    public const int sql_AssemblyNameNotDefined = 613;
    public const int sql_InvalidCLRProcParamType = 614;
    public const int sql_CLRProcExecutionError = 615;
    public const int sql_ParamNotDeclared = 616;
    public const int sql_ReservedWordNameOrAlias = 617;
    public const int sql_ExpectedConstraintEnd = 618;
    public const int sql_InvalidConstraintExpr = 619;
    public const int sql_ParamRedeclaration = 620;
    public const int sql_InvalidParamName = 621;
    public const int sql_ConstraintNotExist = 622;
    public const int sql_DatabaseNotOpened = 623;
    public const int sql_InvalidDataTypeSpec = 624;
    public const int sql_DataTypeLenIsTooLong = 625;
    public const int sql_InvalidSchemaName = 627;
    public const int sql_InvalidNewNameInRename = 628;
    public const int sql_InvalidObjectTypeInRename = 629;
    public const int sql_DuplicateAction = 630;
    public const int sql_InvalidTriggerDeclaration = 631;
    public const int sql_IncorrectSyntax = 632;
    public const int sql_InvalidFtsPattern = 634;
    public const int sql_InvalidCaseSyntax = 635;
    public const int sql_FtsIndexRequired = 636;
    public const int sql_OnlySingleExpressionInSelectList = 637;
    public const int sql_InvalidParamForm = 638;
    public const int sql_InvalidOutParam = 639;
    public const int sql_TooManyArguments = 640;
    public const int sql_ParameterIsNotDefined = 641;
    public const int sql_AssignValueSelect = 642;
    public const int sql_InvalidContinueUsnig = 643;
    public const int sql_InvalidBreakUsing = 644;
    public const int sql_wrongRowGuidCol = 655;
    public const int sql_AggregateTableAsterix = 656;
    public const int sql_AggregateAllAsterix = 657;
    public const int sql_AggregateDistinctAsterix = 658;
    public const int sql_CustomError = 50000;
    public const int sql_WithIsUnsupported = 660;
    public const int sql_NumericParameterRequired = 661;
    public const int sql_UnableToImplicitCastType = 662;
    public const int sql_IncorrectTypeProvided = 663;
    public const int ado_SupportedOnlyCommand = 1001;
    public const int ado_UnknownDataType = 1002;
    public const int ado_SecondDataReader = 1003;
    public const int ado_ChangePropWhileDataAdapter = 1004;
    public const int ado_ChangePropWhileConnOpened = 1005;
    public const int ado_InvalidNameSuffix = 1006;
    public const int ado_InvalidNamePrefix = 1007;
    public const int ado_CommandTextEmpty = 1008;
    public const int ado_ContextConnNotAvailable = 1009;
    public const int ado_CBSchemaCannotBeGenerated = 1010;
    public const int ado_ConnectionMustBeAssigned = 1011;
    public const int ado_ConnectionMustBeOpened = 1012;
    public const int ado_ReadCommittedIsolationOnly = 1013;
    public const int ado_KeywordNotSupported = 1014;
    public const int dt_Position = 2010;
    public const int dt_LastKeyPosition = 2011;
    public const int dt_RowsAdded = 2012;
    public const int dt_SetScope = 2013;
    public const int dt_ResetScope = 2014;
    public const int dt_SetFilter = 2015;
    public const int dt_RowIsNotExist = 2016;
    public const int dt_FindRow = 2017;
    public const int dt_ActiveIndex = 2018;
    public const int dt_UpdateRow = 2019;
    public const int dt_HideNewRow = 2020;
    public const int dt_InsertRow = 2021;
    public const int dt_DeleteRow = 2022;
    public const int dt_OpenTable = 2023;
    public const int dt_Reset = 2024;
    public const int dt_ReadSchema = 2040;
    public const int dt_ReadData = 2041;

    internal Errors()
      : base(350)
    {
      this.ReadResources();
    }

    private void ReadResources()
    {
      this.Add(10, "Method or property not supported");
      this.Add(11, "Database file extension not supported: ");
      this.Add(25, "Your VistaDB license file appears to be invalid or corrupt.");
      this.Add(26, "The VistaDB license file is for a newer version of VistaDB.  Please update your key by reinstalling.");
      this.Add(50, "Database schema specification changed. Pack database to update your database to latest version.");
      this.Add(54, "Database schema specification is newer than what this version of VistaDB supports. Database cannot be used.");
      this.Add(51, "File is not a valid VistaDB 4 database");
      this.Add(52, "FullTextSearch index specification changed. Pack database to update database.");
      this.Add(53, "Database page size is outside the allowable range.");
      this.Add(100, "Cannot create data storage or file: ");
      this.Add(101, "Cannot open data storage or file: ");
      this.Add(102, "Cannot create data storage header: ");
      this.Add(103, "Cannot activate data storage header: ");
      this.Add(104, "Cannot initialize header data of: ");
      this.Add(105, "Cannot read header of: ");
      this.Add(106, "Cannot write header of: ");
      this.Add(107, "Allocate row structure in data storage: ");
      this.Add(167, "Row structure data size exceeds the database page size: ");
      this.Add(108, "Incompatible mode. Database storage is read-only. You cannot access it for write operations: ");
      this.Add(109, "Incompatible exclusive access mode. Only single table instance may be opened: ");
      this.Add(110, "Cannot read data storage or file: ");
      this.Add(111, "Cannot write data storage or file: ");
      this.Add(112, "Cannot declare new data storage: ");
      this.Add(113, "Cannot create database: ");
      this.Add(114, "Cannot create database in isolated storage");
      this.Add(115, "Cannot create temporary database");
      this.Add(116, "Invalid encryption key. Unable to decode database with given encryption key: ");
      this.Add(117, "Cannot open database: ");
      this.Add(118, "Cannot open database in isolated storage");
      this.Add(119, "Cannot create table: ");
      this.Add(120, "Cannot rename or alter table: ");
      this.Add(121, "Cannot drop table: ");
      this.Add(122, "Table is opened and cannot be dropped at current moment");
      this.Add(123, "Cannot create table header: ");
      this.Add(124, "At least one column should be created in the table: ");
      this.Add(125, "Cannot open table: ");
      this.Add(126, "Table not found: ");
      this.Add((int) sbyte.MaxValue, "Index not found: ");
      this.Add(128, "An error happened while table was being closed: ");
      this.Add(129, "An error happened while data storage was being closed");
      this.Add(130, "Cannot create index");
      this.Add(131, "Cannot delete index: ");
      this.Add(132, "Cannot explicitly delete foreign key index: ");
      this.Add(133, "Index information absent: ");
      this.Add(134, "Cannot activate index");
      this.Add(135, "Cannot activate database");
      this.Add(136, "Index deactivation error");
      this.Add(137, "Cannot create default values in table: ");
      this.Add(138, "Cannot initialize default values in table: ");
      this.Add(139, "Cannot access node at position: ");
      this.Add(140, "Schema was changed by another instance. Data storage must be reopened: ");
      this.Add(141, "You cannot use this database opening mode on Compact Framework: ");
      this.Add(142, "Primary key cannot contains column with null value: ");
      this.Add(143, "The primary key already exists. Only one primary key index allowed");
      this.Add(144, "Table contains primary key referenced and cannot be deleted");
      this.Add(145, "Duplicate table name: ");
      this.Add(146, "Duplicate index name: ");
      this.Add(147, "Duplicate Column name : ");
      this.Add(149, "Index key column count exceeds maximum allowed count: ");
      this.Add(150, "Index key cannot contain the column: ");
      this.Add(152, "Invalid name or alias: ");
      this.Add(153, "Unsupported VistaDB type");
      this.Add(154, "Column number exceeds maximum allowed: ");
      this.Add(155, "Full text index cannot be made active.  Pack the database to repair the index.");
      this.Add(156, "The full text index already exists. Only one full text index allowed per table");
      this.Add(157, "Row cannot contain two and more columns with same VistaDB.Timestamp data type");
      this.Add(158, "Isolated database does not support access mode: ");
      this.Add(159, "Cannot rename foreign key index");
      this.Add(160, "Cannot use lock policy by storage: ");
      this.Add(161, "Cannot lock data storage: ");
      this.Add(162, "Cannot lock file position: ");
      this.Add(163, "Lock timeout expired");
      this.Add(164, "Cannot lock row: ");
      this.Add(165, "Cannot unlock row: ");
      this.Add(166, "Cannot release locks");
      this.Add(170, "Expression statement failed ");
      this.Add(171, "Cannot execute default value generator: ");
      this.Add(172, "Cannot pass constraint: ");
      this.Add(173, "Column marked as readonly: ");
      this.Add(174, "Column cannot contain null value: ");
      this.Add(179, "Operation PutFromFile/GetToFile is not supported for data type: ");
      this.Add(180, "Cannot access closed table");
      this.Add(181, "Cannot find column specified by name. Verify the column exists: ");
      this.Add(182, "Cannot get column by index: ");
      this.Add(183, "Column value is null: ");
      this.Add(184, "Identity assigned to the column: ");
      this.Add(185, "Identity does not exist: ");
      this.Add(186, "Cannot create identity: ");
      this.Add(187, "Cannot drop identity: ");
      this.Add(188, "Seed value cannot be null: ");
      this.Add(189, "Step value cannot be null: ");
      this.Add(190, "Invalid step value: ");
      this.Add(191, "Column data type is not supported by identity: ");
      this.Add(192, "Default value script has not been assigned to column: ");
      this.Add(193, "Cannot assign default value script for column: ");
      this.Add(194, "Cannot drop default value script for column: ");
      this.Add(195, "Constraint is not existing: ");
      this.Add(196, "Cannot set constraint: ");
      this.Add(197, "Cannot delete constraint: ");
      this.Add(198, "Column data type is not supported by default value script expression: ");
      this.Add(199, "Primary key is referenced by foreign key constraint: ");
      this.Add(200, "Cannot set foreign key constraint: ");
      this.Add(201, "Cannot drop foreign key constraint: ");
      this.Add(202, "Primary key is not existing in table: ");
      this.Add(203, "Foreign key cannot relate to primary key in the same table (self reference): ");
      this.Add(204, "Relationship with same name exists: ");
      this.Add(205, "Relationship does not exists: ");
      this.Add(206, "Parent key and child key are identical");
      this.Add(207, "Cannot alter or drop system column: ");
      this.Add(208, "Cannot modify table structure or data in the table. The table is used by VistaDB core: ");
      this.Add(209, "Table is used by sync service and cannot be dropped: ");
      this.Add(210, "Cannot activate sync service for table: ");
      this.Add(211, "Cannot deactivate sync service for table: ");
      this.Add(212, "Cannot apply tombstone table name. The table with same name already exists ");
      this.Add(213, "Cannot apply name for anchor table. The table with same name already exists ");
      this.Add(250, "Cannot create row: ");
      this.Add(251, "Cannot update row: ");
      this.Add(252, "Cannot delete row: ");
      this.Add(253, "Cannot activate referential link to: ");
      this.Add(254, "Cannot create referential link to: ");
      this.Add((int) byte.MaxValue, "Cannot create linked referential data: ");
      this.Add(256, "Cannot update referential link to: ");
      this.Add(257, "Cannot update referential linked data: ");
      this.Add(258, "Cannot delete referential link to: ");
      this.Add(259, "Cannot delete referential linked data: ");
      this.Add(260, "Trying to update inaccessible row: ");
      this.Add(261, "Trying to delete inaccessible row: ");
      this.Add(262, "Row has been modified or deleted by another thread or process");
      this.Add(270, "Find key procedure cannot be executed");
      this.Add(271, "Cannot synchronize key position");
      this.Add(272, "Invalid index to look for key: ");
      this.Add(280, "The string expression or object name is null reference or empty");
      this.Add(281, "Cannot compile expression: ");
      this.Add(282, "Cannot compile index key expression: ");
      this.Add(285, "Invalid expression: ");
      this.Add(286, "Parenthesis mismatch");
      this.Add(287, "Invalid delimiter: ");
      this.Add(288, "Invalid parameter or parameter type");
      this.Add(289, "Incorrect operand type or missed parameter or operand in expression: ");
      this.Add(290, "Cannot match data types in expression or v-function signature");
      this.Add(291, "Expression should be logical");
      this.Add(292, "Cannot evaluate operator: ");
      this.Add(293, "Invalid If-Else group");
      this.Add(294, "Unexpected Then");
      this.Add(295, "Unexpected Else");
      this.Add(296, "String constant has no end delimiter");
      this.Add(297, "Incomplete expression");
      this.Add(298, "Invalid operation");
      this.Add(299, "Invalid float number format: ");
      this.Add(300, "Value exceeds dynamic range of the data type: ");
      this.Add(301, "Character column data exceeds maximum length");
      this.Add(302, "Cannot convert data type: ");
      this.Add(303, "Data type maximum length should be between 0 and ");
      this.Add(304, "Invalid page count request to allocate by extended column data: ");
      this.Add(305, "Cannot initialize sort spool");
      this.Add(307, "Cannot evaluate index key: ");
      this.Add(308, "Cannot evaluate expression: ");
      this.Add(309, "Duplicate key found in index: ");
      this.Add(320, "Cannot assign environment variable: ");
      this.Add(321, "Cannot alter relationships in table: ");
      this.Add(330, "Cannot encrypt node");
      this.Add(331, "Cannot decrypt node");
      this.Add(332, "Cannot import data from data storage: ");
      this.Add(333, "Cannot export data to data storage: ");
      this.Add(334, "Cannot pack data storage: ");
      this.Add(335, "Cannot delete all rows in data storage: ");
      this.Add(336, "Cannot pack database: ");
      this.Add(337, "Operation cannot be applied in read-only data storage mode: ");
      this.Add(338, "Operation cannot be applied in shared data storage mode: ");
      this.Add(339, "Cannot clean up data storage: ");
      this.Add(340, "Cannot execute script before inserting a new row");
      this.Add(341, "Cannot execute script after inserting a new row");
      this.Add(342, "Cannot execute script before updating row");
      this.Add(343, "Cannot execute script after updating row");
      this.Add(345, "Cannot execute script after deleting row");
      this.Add(346, "Cannot initialize free space recycling");
      this.Add(347, "A database opened via DDA cannot be packed or repaired from a VistaDBConnection. Use DDA operations instead.");
      this.Add(360, "Cannot export table: ");
      this.Add(380, "Name of CLR Proc with public static attributes not found: ");
      this.Add(381, "Duplicate CLR Proc name: ");
      this.Add(382, "Invalid parameters number passed to invoke CLR Proc");
      this.Add(383, "The CLR Proc is not registered in database: ");
      this.Add(384, "The helper FillRow CLR Proc is not registered in database: ");
      this.Add(385, "The assembly references CLR Proc: ");
      this.Add(386, "Cannot register CLR Proc");
      this.Add(387, "Cannot unregister CLR Proc: ");
      this.Add(388, "Cannot invoke CLR Proc: ");
      this.Add(389, "The name of assembly is already registered: ");
      this.Add(390, "The assembly is not registered: ");
      this.Add(391, "Cannot add assembly: ");
      this.Add(392, "Cannot update assembly: ");
      this.Add(393, "Cannot delete assembly: ");
      this.Add(397, "CLR Trigger not registered");
      this.Add(394, "Duplicate Clr Trigger name: ");
      this.Add(395, "Cannot register Clr Trigger");
      this.Add(396, "Cannot unregister Clr Trigger");
      this.Add(398, "The assembly references Clr Trigger");
      this.Add(399, "Cannot set event type for Clr trigger: ");
      this.Add(400, "Duplicate stored procedure or udf name");
      this.Add(401, "Cannot register stored procedure or udf");
      this.Add(402, "Cannot unregister stored procedure or udf");
      this.Add(450, "Cannot begin transaction");
      this.Add(452, "Cannot rollback transaction");
      this.Add(451, "Cannot commit transaction");
      this.Add(453, "Cannot create transaction log for table: ");
      this.Add(454, "Cannot open transaction log for table: ");
      this.Add(455, "Concurrency error. The row is being updated or deleted by another active transaction");
      this.Add(456, "Isolation level not supported");
      this.Add(457, "Nested transactions not supported");
      this.Add(458, "The ROLLBACK TRANSACTION request has no corresponding BEGIN TRANSACTION");
      this.Add(459, "The COMMIT TRANSACTION request has no corresponding BEGIN TRANSACTION");
      this.Add(460, "TransactionMode is set to OFF on this connection.  No transactions may be used.");
      this.Add(461, "The encryption key string cannot be an empty string.  Use NULL or Nothing to turn off encryption.");
      this.Add(462, "TransactionMode can only be set to OFF on this connection.  No transactions may be used.");
      this.Add(500, "Expected symbol: ");
      this.Add(501, "Invalid parameter count in function: ");
      this.Add(502, "Expected expression, but found: ");
      this.Add(503, "Unterminated string");
      this.Add(504, "Unterminated table or column name");
      this.Add(505, "Unterminated column name");
      this.Add(506, "Unterminated comment");
      this.Add(507, "Expected expression(s): ");
      this.Add(550, "Invalid parameter(s) data type in function: ");
      this.Add(551, "Aggregate function cannot have nested aggregate functions");
      this.Add(552, "Pattern must be string for: ");
      this.Add(553, "Invalid pattern. Escape character must be enclosed in the single quotes and have only one symbol");
      this.Add(554, "Unterminated pattern");
      this.Add(555, "Invalid pattern. First character in range must be smaller than second");
      this.Add(556, "Unexpected error: ");
      this.Add(50000, "Raised error: ");
      this.Add(660, "Using the statment WITH is unsupported at this location");
      this.Add(557, "Join condition must have boolean result");
      this.Add(558, "Invalid operand(s) data type for operator: ");
      this.Add(559, "LIKE match expression must be string compatible data type");
      this.Add(560, "Invalid using of IS operator. Expected NULL or NOT NULL, but found: ");
      this.Add(561, "Invalid expression in the result column: ");
      this.Add(562, "Columns used in expression with aggregate function is not defined in GROUP BY clause: ");
      this.Add(563, "Table alias duplicated: ");
      this.Add(564, "Expected boolean expression");
      this.Add(565, "WHERE clause cannot have aggregate functions");
      this.Add(567, "Column does not exist: ");
      this.Add(568, "Expression already present in GROUP BY clause: ");
      this.Add(569, "Expression is not present in GROUP BY clause: ");
      this.Add(570, "HAVING clause must have boolean result");
      this.Add(571, "HAVING can have only expressions which is in SELECT result or in GROUP BY");
      this.Add(572, "Table does not exist: ");
      this.Add(573, "GROUP BY cannot be used if result does not have aggregate functions");
      this.Add(574, "GROUP BY clause cannot have aggregate functions");
      this.Add(575, "HAVING clause cannot be used if result does not have aggregate functions");
      this.Add(576, "Expected keyword: ");
      this.Add(577, "All SELECTs in union must have the same column count");
      this.Add(578, "All SELECTs in union must have columns with compatible types");
      this.Add(579, "In some tables exists the same column: ");
      this.Add(580, "GROUP BY expression must contain at least one column");
      this.Add(508, "Unknown data type: ");
      this.Add(509, "Invalid or incomplete statement: ");
      this.Add(581, "CASE function must have at least one WHEN operator");
      this.Add(582, "If in CASE function is not defined input expression, than WHEN expressions must has boolean results");
      this.Add(583, "In CASE function WHEN expressions must have data type compatible with input expression data type");
      this.Add(584, "CASE function results must have the same (or compatible) data types");
      this.Add(585, "Invalid table name: ");
      this.Add(586, "Invalid column name: ");
      this.Add(587, "There are fewer columns in the INSERT statement than values specified in the VALUES clause. The number of values in the VALUES clause must match the number of columns specified in the INSERT statement");
      this.Add(588, "There are more columns in the INSERT statement than values specified in the VALUES clause. The number of values in the VALUES clause must match the number of columns specified in the INSERT statement");
      this.Add(589, "The select list for the INSERT statement contains more items than the insert list. The number of SELECT values must match the number of INSERT columns");
      this.Add(590, "The select list for the INSERT statement contains fewer items than the insert list. The number of SELECT values must match the number of INSERT columns");
      this.Add(591, "Invalid query index: ");
      this.Add(592, "Invalid token in statement: ");
      this.Add(593, "Invalid parameters in CREATE DATABASE");
      this.Add(594, "Column names duplicated in CREATE TABLE: ");
      this.Add(595, "Constraint names duplicated in CREATE TABLE: ");
      this.Add(596, "Table can have only one instance of primary key");
      this.Add(597, "There can be created only one clustered index.  Delete existing clustered index prior to creating another one.");
      this.Add(598, "Foreign key column count and primary key column count must be the same");
      this.Add(599, "Column cannot have default value and identity at the same time: ");
      this.Add(600, "Primary key does not exist in the table: ");
      this.Add(601, "Invalid Primary key defined in references");
      this.Add(602, "Column count defined in the view differs from column count defined in the SELECT");
      this.Add(603, "View name duplicated: ");
      this.Add(604, "Sub query is read only");
      this.Add(605, "View is read only: ");
      this.Add(606, "View does not exist: ");
      this.Add(607, "Function does not exist: ");
      this.Add(608, "Invalid identifier: ");
      this.Add(609, "Stored procedure result set is read only");
      this.Add(610, "First parameter must have System.Object data type in the FillRow method for CLR Proc: ");
      this.Add(611, "Expected out parameter for CLR Proc: ");
      this.Add(612, "FillRow method does not exist for CLR Proc: ");
      this.Add(613, "Assembly name is not defined for CLR Proc: ");
      this.Add(614, "Invalid parameter data type in CLR Proc: ");
      this.Add(615, "CLR Proc execution error: ");
      this.Add(616, "Parameter not declared: ");
      this.Add(617, "Name or alias cannot be reserved word: ");
      this.Add(618, "Expected end of constraint");
      this.Add(619, "Constraint expression must have boolean result data type");
      this.Add(620, "Parameter redeclaration: ");
      this.Add(621, "Invalid parameter name: ");
      this.Add(622, "Constraint does not exist: ");
      this.Add(623, "Database not opened");
      this.Add(624, "Invalid or missing data type specification");
      this.Add(625, "Data type length is too long. Max length can be: ");
      this.Add(627, "Invalid schema name. DBO must be used instead of: ");
      this.Add(628, "Invalid new object name in sp_rename function: ");
      this.Add(629, "Invalid object type in sp_rename function: ");
      this.Add(630, "Duplicate specification of the action in the trigger declaration.");
      this.Add(631, "Value is not a recognized trigger.");
      this.Add(632, "Incorrect syntax near the keyword");
      this.Add(634, "Syntax error in the full text search condition");
      this.Add(635, "Invalid syntax of case function. Searched format is used but non constant expression found.");
      this.Add(636, "Cannot use a CONTAINS function on table because there is no FullTextSearch index.  Create an FullTextSearch Index on the table first.");
      this.Add(637, "Only one expression can be specified in the select list");
      this.Add(638, "Must pass parameter and subsequent parameters as @name = value. After the form @name = value has been used, all subsequent parameters must be passed in the same form.");
      this.Add(639, "The formal parameter was not declared as an OUTPUT parameter, but the actual parameter passed in requested output. Parameter name:");
      this.Add(640, "Procedure or function has too many arguments specified. Procedure name:");
      this.Add(641, "Procedure or Function expects parameter,which was not supplied. Procedure name:");
      this.Add(642, "A SELECT statement that assigns a value to a variable must not be combined with data-retrieval operations");
      this.Add(644, "Cannot use a BREAK statement outside the scope of a WHILE statement");
      this.Add(643, "Cannot use a CONTINUE statement outside the scope of a WHILE statement");
      this.Add(655, "The ROWGUIDCOL property can only be specified on the uniqueidentifier data type.");
      this.Add(656, "An aggregate statement using a table must specify a column name.  AggregateFunction(*) is only valid for single table selects.  Qualify a column name with the table such as COUNT(table.column) instead.");
      this.Add(657, "(ALL *) is not valid syntax with aggregate functions.  Use a column name with the ALL descriptor such as COUNT( ALL ColumnName ) instead.");
      this.Add(658, "(DISTINCT *) is not valid syntax with aggregate functions.  Use a column name with the descriptor such as COUNT( DISTINCT ColumnName ) instead.");
      this.Add(661, "A Numeric data type is required in function: ");
      this.Add(662, "Unable to perform the requested implicit cast operation.  Try CAST() to the desired type instead. Output Target: ");
      this.Add(663, "Data Conversion failed, unable to convert input to correct datatype. ");
      this.Add(1001, "VistaDB supports only Text and StoredProcedure command types");
      this.Add(1002, "Unknown data type: ");
      this.Add(1003, "VistaDBCommand cannot be executed while associated VistaDBDataReader object opened");
      this.Add(1004, "VistaDBCommand properties cannot be changed while associated VistaDBDataReader object opened");
      this.Add(1005, "VistaDBConnection properties cannot be changed while it opened");
      this.Add(1006, "Name can support as suffix only \"]\"");
      this.Add(1007, "Name can support as prefix only \"[\"");
      this.Add(1008, "Command text is empty");
      this.Add(1009, "Context connection is not available");
      this.Add(1010, "Schema cannot be generated: ");
      this.Add(1011, "Connection property must be assigned");
      this.Add(1012, "Connection must be opened");
      this.Add(1013, "Only Read Committed Isolation is supported");
      this.Add(1014, "Keyword not supported");
      this.Add(2010, "Cannot position to cached row in the table");
      this.Add(2011, "Last cached row does not exist");
      this.Add(2012, "New rows were added to the table");
      this.Add(2013, "Cannot set scope on the table");
      this.Add(2014, "Cannot reset scope on the table");
      this.Add(2015, "Cannot set filter on the table");
      this.Add(2016, "Cached row does not exist");
      this.Add(2017, "Cannot find needed row");
      this.Add(2018, "Cannot set active index");
      this.Add(2019, "Cannot post update");
      this.Add(2020, "New row does not exist in the current scope");
      this.Add(2021, "Cannot post insert");
      this.Add(2022, "Cannot delete row from the table");
      this.Add(2023, "Cannot open table");
      this.Add(2040, "Cannot load table schema");
      this.Add(2041, "Cannot load table data");
      this.Add(2024, "Cannot reset cache");
    }

    private bool SetMessage(int id, string message, int priority)
    {
      return false;
    }

    public string GetMessage(int id)
    {
      string str = string.Format("Error {0} (Provider v. {1}): ", (object) id, (object) this.assemblyVersion);
      if (!this.ContainsKey(id))
        return str + "unknown error";
      return str + this[id];
    }
  }
}
